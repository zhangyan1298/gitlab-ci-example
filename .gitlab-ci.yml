# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.
before_script:
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # In order to properly check the server's host key, assuming you created the
  # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
  # instead.
  # - mkdir -p ~/.ssh
  # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
 


variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
stages:
 - build
 - test
 - running
 - deploy-k8s
# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'


validate:jdk8:
  <<: *validate
  image: maven:3.3.9-jdk-8
  tags:
   - ubunt-docker
  variables:
   CI_DEBUG_TRACE: "true"


#############deploy test
dubbo-service-consumer:jdk8:
  # Use stage test here, so the pages job may later pickup the created site.
  stage: test
  script:
    - 'mvn clean install -Dmaven.test.skip=true -Drat.numUnapprovedLicenses=100'
    - scp $(ls dubbo-spring-boot-samples/dubbo-spring-boot-sample-consumer/target/*.jar|egrep "*(SNAPSHOT|RELEASE).jar") gitlab-runner@gke-cluster-1:/home/gitlab-runner/dubbo-consumer-test.jar
    - ssh gitlab-runner@gke-cluster-1 "sudo systemctl restart dubbo-consumer@test"
  image: maven:3-jdk-8
  tags: 
   - ubunt-docker
  only:
   - developer
    
####################docker build##################
runing-docker:buildpush:
 stage: running
 script:
  ##docker login
  - ssh gitlab-runner@gke-cluster-1 "sudo docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
  - scp Dockerfile gitlab-runner@gke-cluster-1:/home/gitlab-runner
  - ssh gitlab-runner@gke-cluster-1 "sudo  docker build -t dockeryanxiao/dubbo-consumer-test:$CI_COMMIT_REF_NAME ."
  - ssh gitlab-runner@gke-cluster-1 "sudo docker push dockeryanxiao/dubbo-consumer-test:$CI_COMMIT_REF_NAME"
 tags:
  - ubunt-docker
 only:
  - developer
 image: maven:3-jdk-8
 when: manual
 
runing-k8s:deploy:
 stage: deploy-k8s
 script:
  - apt-get update && apt-get install sudo curl lsb-release gnupg -y
   # Create environment variable for correct distribution
  - export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
   # Add the Cloud SDK distribution URI as a package source
  - echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
   # Import the Google Cloud Platform public key
  - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   # Update the package list and install the Cloud SDK
  - apt-get update && apt-get install google-cloud-sdk -y
#  - gcloud components install kubectl
  - apt-get install kubectl
  - gcloud init --console-only
  - echo "${GCLOUDKEY}" >gcloud-temp.json
  - gcloud auth activate-service-account --key-file=gcloud-temp.json
  - gcloud container clusters get-credentials cluster-1 --zone us-central1-a --project nimble-sylph-214302
  - kubectl apply -f dubbo-consumer-k8svc.yaml
 tags:
  - k8s-1
 image: ubuntu:18.04
 when: manual


